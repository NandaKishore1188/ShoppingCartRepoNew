{"ast":null,"code":"import { REGISTER_SUCCESS, REGISTER_FAIL, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT, SET_MESSAGE } from \"./types\";\nimport AuthService from \"../services/auth.service\";\nexport const register = (fullName, emailId, password, mobileNumber, gender) => dispatch => {\n  return AuthService.register(fullName, emailId, password, mobileNumber, gender).then(response => {\n    dispatch({\n      type: REGISTER_SUCCESS\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: response.data.message\n    });\n    return Promise.resolve();\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: REGISTER_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};\nexport const login = (username, password) => dispatch => {\n  return AuthService.login(username, password).then(data => {\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: {\n        user: data\n      }\n    });\n    return Promise.resolve();\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: LOGIN_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};\nexport const logout = () => dispatch => {\n  AuthService.logout();\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"names":["REGISTER_SUCCESS","REGISTER_FAIL","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","SET_MESSAGE","AuthService","register","fullName","emailId","password","mobileNumber","gender","dispatch","then","response","type","payload","data","message","Promise","resolve","error","toString","reject","login","username","user","logout"],"sources":["C:/Users/nanda/OneDrive/Desktop/code with ui and backend/springboot-reactjs-jwt-authentication-main/react-redux-jwt/src/actions/auth.js"],"sourcesContent":["import {\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  LOGOUT,\n  SET_MESSAGE,\n} from \"./types\";\n\nimport AuthService from \"../services/auth.service\";\n\nexport const register = (fullName, emailId, password,mobileNumber,gender) => (dispatch) => {\n  return AuthService.register(fullName, emailId, password,mobileNumber,gender).then(\n    (response) => {\n      dispatch({\n        type: REGISTER_SUCCESS,\n      });\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: response.data.message,\n      });\n\n      return Promise.resolve();\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString();\n\n      dispatch({\n        type: REGISTER_FAIL,\n      });\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: message,\n      });\n\n      return Promise.reject();\n    }\n  );\n};\n\nexport const login = (username, password) => (dispatch) => {\n  return AuthService.login(username, password).then(\n    (data) => {\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: { user: data },\n      });\n\n      return Promise.resolve();\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString();\n\n      dispatch({\n        type: LOGIN_FAIL,\n      });\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: message,\n      });\n\n      return Promise.reject();\n    }\n  );\n};\n\nexport const logout = () => (dispatch) => {\n  AuthService.logout();\n\n  dispatch({\n    type: LOGOUT,\n  });\n};\n"],"mappings":"AAAA,SACEA,gBADF,EAEEC,aAFF,EAGEC,aAHF,EAIEC,UAJF,EAKEC,MALF,EAMEC,WANF,QAOO,SAPP;AASA,OAAOC,WAAP,MAAwB,0BAAxB;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAACC,QAAD,EAAWC,OAAX,EAAoBC,QAApB,EAA6BC,YAA7B,EAA0CC,MAA1C,KAAsDC,QAAD,IAAc;EACzF,OAAOP,WAAW,CAACC,QAAZ,CAAqBC,QAArB,EAA+BC,OAA/B,EAAwCC,QAAxC,EAAiDC,YAAjD,EAA8DC,MAA9D,EAAsEE,IAAtE,CACJC,QAAD,IAAc;IACZF,QAAQ,CAAC;MACPG,IAAI,EAAEhB;IADC,CAAD,CAAR;IAIAa,QAAQ,CAAC;MACPG,IAAI,EAAEX,WADC;MAEPY,OAAO,EAAEF,QAAQ,CAACG,IAAT,CAAcC;IAFhB,CAAD,CAAR;IAKA,OAAOC,OAAO,CAACC,OAAR,EAAP;EACD,CAZI,EAaJC,KAAD,IAAW;IACT,MAAMH,OAAO,GACVG,KAAK,CAACP,QAAN,IACCO,KAAK,CAACP,QAAN,CAAeG,IADhB,IAECI,KAAK,CAACP,QAAN,CAAeG,IAAf,CAAoBC,OAFtB,IAGAG,KAAK,CAACH,OAHN,IAIAG,KAAK,CAACC,QAAN,EALF;IAOAV,QAAQ,CAAC;MACPG,IAAI,EAAEf;IADC,CAAD,CAAR;IAIAY,QAAQ,CAAC;MACPG,IAAI,EAAEX,WADC;MAEPY,OAAO,EAAEE;IAFF,CAAD,CAAR;IAKA,OAAOC,OAAO,CAACI,MAAR,EAAP;EACD,CA/BI,CAAP;AAiCD,CAlCM;AAoCP,OAAO,MAAMC,KAAK,GAAG,CAACC,QAAD,EAAWhB,QAAX,KAAyBG,QAAD,IAAc;EACzD,OAAOP,WAAW,CAACmB,KAAZ,CAAkBC,QAAlB,EAA4BhB,QAA5B,EAAsCI,IAAtC,CACJI,IAAD,IAAU;IACRL,QAAQ,CAAC;MACPG,IAAI,EAAEd,aADC;MAEPe,OAAO,EAAE;QAAEU,IAAI,EAAET;MAAR;IAFF,CAAD,CAAR;IAKA,OAAOE,OAAO,CAACC,OAAR,EAAP;EACD,CARI,EASJC,KAAD,IAAW;IACT,MAAMH,OAAO,GACVG,KAAK,CAACP,QAAN,IACCO,KAAK,CAACP,QAAN,CAAeG,IADhB,IAECI,KAAK,CAACP,QAAN,CAAeG,IAAf,CAAoBC,OAFtB,IAGAG,KAAK,CAACH,OAHN,IAIAG,KAAK,CAACC,QAAN,EALF;IAOAV,QAAQ,CAAC;MACPG,IAAI,EAAEb;IADC,CAAD,CAAR;IAIAU,QAAQ,CAAC;MACPG,IAAI,EAAEX,WADC;MAEPY,OAAO,EAAEE;IAFF,CAAD,CAAR;IAKA,OAAOC,OAAO,CAACI,MAAR,EAAP;EACD,CA3BI,CAAP;AA6BD,CA9BM;AAgCP,OAAO,MAAMI,MAAM,GAAG,MAAOf,QAAD,IAAc;EACxCP,WAAW,CAACsB,MAAZ;EAEAf,QAAQ,CAAC;IACPG,IAAI,EAAEZ;EADC,CAAD,CAAR;AAGD,CANM"},"metadata":{},"sourceType":"module"}