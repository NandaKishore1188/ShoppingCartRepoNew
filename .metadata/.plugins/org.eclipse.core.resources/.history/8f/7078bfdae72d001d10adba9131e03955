package com.capg.controller;

import java.util.List;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

import com.capg.dto.UserProfileDTO;
import com.capg.entity.UserProfile;
import com.capg.service.ProfileService;
import com.capg.service.SequenceGeneratorService;

@RestController
@RequestMapping("/admin")
public class AdminController {

	@Autowired
	ProfileService profileService;
	
	 @Autowired
	 RestTemplate restTemplate;
	 
	 @Autowired
	 private SequenceGeneratorService service;
	 
	 @GetMapping("/getall")
		public List<UserProfileDTO> userProfile(){
			return profileService.getAllProfiles();
		}
	 
	 @GetMapping("/get/{profileId}")
		public UserProfileDTO byProfileId(@PathVariable Integer profileId) {
			return profileService.getByProfileId(profileId);
		}
		
		@PostMapping("/save")
		public ResponseEntity<UserProfileDTO> save(@Valid @RequestBody UserProfileDTO cust) {
			
			cust.setProfileId(service.getSequenceNumber(UserProfile.SEQUENCE_NAME));

			return new ResponseEntity<UserProfileDTO>(profileService.addNewCustomerProfile(cust),HttpStatus.CREATED);
		}
		
		//the following code is for the update method in mongoDB
		@PutMapping("/update/{profileId}")
		public ResponseEntity<UserProfile> update(@PathVariable Integer profileId,@RequestBody UserProfile user) throws Exception{
			user.setProfileId(profileId);
			return  ResponseEntity.ok().body(this.profileService.updateProfile(user));
		}
		
		@DeleteMapping("/delete/{profileId}")
		public String delete(@PathVariable Integer profileId) {
			profileService.deleteUserProfile(profileId);
			return "Customer With ID "+profileId+" Was Deleted Successfully!!"; 
		}
		
		@DeleteMapping("/deleteAll")
		public String deleteAll() {
			profileService.deleteAllUserProfiles();
			return "All Customers Deleted Successfully!!";
		}
		
		@GetMapping("/getbymail/{emailId}")
		public UserProfileDTO customerBymail(@PathVariable String emailId) {
			return profileService.getByMail(emailId);
		}
		
		
		 //*******************************************Products******************************************************************
		
}
